// <auto-generated />
using System;
using ArtefactsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtefactsManager.Migrations
{
    [DbContext(typeof(ArtefactsManagerDatabaseContext))]
    [Migration("20220517163132_add_owner_to_artefact")]
    partial class add_owner_to_artefact
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ArtefactsManager.Data.Models.Artefact", b =>
                {
                    b.Property<int>("ArtefactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArtefactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.HasKey("ArtefactId");

                    b.HasIndex("ArtefactTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Artefacts");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.ArtefactAttribute", b =>
                {
                    b.Property<int>("ArtefactId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ArtefactId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ArtefactsAttributes");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.ArtefactType", b =>
                {
                    b.Property<int>("ArtefactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("ArtefactTypeId");

                    b.ToTable("ArtefactsTypes");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("AttributeId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.AttributeArtefactType", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ArtefactTypeId")
                        .HasColumnType("int");

                    b.HasKey("AttributeId", "ArtefactTypeId");

                    b.HasIndex("ArtefactTypeId");

                    b.ToTable("AttributesArtefactsTypes");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanAdd")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<bool>("Editable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Artefact", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.ArtefactType", "ArtefactType")
                        .WithMany()
                        .HasForeignKey("ArtefactTypeId");

                    b.HasOne("ArtefactsManager.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ArtefactsManager.Data.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.ArtefactAttribute", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.Artefact", "Artefact")
                        .WithMany("ArtefactAttributes")
                        .HasForeignKey("ArtefactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtefactsManager.Data.Models.Attribute", "Attribute")
                        .WithMany("ArtefactAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.AttributeArtefactType", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.ArtefactType", "ArtefactType")
                        .WithMany("AttributeArtefactTypes")
                        .HasForeignKey("ArtefactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtefactsManager.Data.Models.Attribute", "Attribute")
                        .WithMany("AttributeArtefactTypes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.RolePermission", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtefactsManager.Data.Models.Role", "Role")
                        .WithMany("rolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.User", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
