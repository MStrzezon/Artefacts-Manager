// <auto-generated />
using ArtefactsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtefactsManager.Migrations
{
    [DbContext(typeof(ArtefactsManagerDatabaseContext))]
    [Migration("20220511193045_addCharacters")]
    partial class addCharacters
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ArtefactsManager.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.CategoryCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryCharacter");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Cave", b =>
                {
                    b.Property<int>("CaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.HasKey("CaveId");

                    b.ToTable("Caves");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Dragon", b =>
                {
                    b.Property<int>("DragonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<int>("WingSpan")
                        .HasColumnType("int");

                    b.HasKey("DragonId");

                    b.ToTable("Dragons");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Ent", b =>
                {
                    b.Property<int>("EntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<int>("numberOfRings")
                        .HasColumnType("int");

                    b.HasKey("EntId");

                    b.ToTable("Ents");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Grove", b =>
                {
                    b.Property<int>("GroveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.HasKey("GroveId");

                    b.ToTable("Groves");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Mage", b =>
                {
                    b.Property<int>("MageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int");

                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.HasKey("MageId");

                    b.ToTable("Mages");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Quarter", b =>
                {
                    b.Property<int>("QuarterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuarterName")
                        .HasColumnType("int");

                    b.HasKey("QuarterId");

                    b.ToTable("Quarters");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SpeciesName")
                        .HasColumnType("text");

                    b.HasKey("SpeciesId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.Tower", b =>
                {
                    b.Property<int>("TowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.HasKey("TowerId");

                    b.ToTable("Towers");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.CategoryCharacter", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.Category", "Category")
                        .WithMany("Characters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtefactsManager.Data.Models.Character", "Character")
                        .WithMany("Categories")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtefactsManager.Data.Models.UserRole", b =>
                {
                    b.HasOne("ArtefactsManager.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtefactsManager.Data.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
